Answer 1:

create table Item(
    Item_Code int not null,
    Item_Description varchar(25),
    Unit_Price int,
    EOQ int,
    ROL int,
    SOH int,
    Back_Order_Qty int,
    Constraint pk1_item Primary Key(Item_Code)
);

create table Section(
    Section_Code int,
    Section_Name varchar(25),
    Constraint pk1_section Primary Key (Section_Code)
);

create table Cheque(
    Cheque_No int,
    Cheque_Date Date,
    Cheque_Amount int,
    Constraint pk1_cheque Primary Key(Cheque_No)
);

create table Indent(
    Indent_No int,
    Quantity_Demanded int,
    Quantity_Issued int,
    Section_Code int,
    Item_Code int,
    Constraint pk1_indent Primary Key(Indent_No),
    Constraint fk1_indent Foreign Key(Section_Code) references Section(Section_Code),
    Constraint fk2_indent Foreign Key(Item_Code) references Item(Item_Code)
);

create table Vendor(
    Vendor_No int,
    Vendor_Name varchar(25),
    Vendor_Addr varchar(25),
    Constraint pk1_vendor Primary Key(Vendor_No)
);

create table Voucher(
    Voucher_No int,
    Voucher_Date date,
    Vendor_No int,
    Cheque_No int,
    Constraint pk1_voucher Primary Key(Voucher_No),
    Constraint fk1_voucher Foreign Key(Vendor_No) references Vendor(Vendor_No),
    Constraint fk2_voucher Foreign Key(Cheque_No) references Cheque(Cheque_No)
);

create table Orders(
    Order_No int,
    Order_Date date,
    Voucher_No int,
    Vendor_No int,
    Due_Date date,
    Constraint pk1_order Primary Key(Order_No),
    Constraint fk1_order Foreign Key(Voucher_No) references Voucher(Voucher_No),
    Constraint fk2_order Foreign Key(Vendor_No) references Vendor(Vendor_No)
);

create table Ordering(
    Order_No int,
    Item_Code int,
    Quantity_Recieved int,
    Constraint fk1_ordering Foreign Key(Order_No) references Orders(Order_No),
    Constraint fk2_ordering Foreign Key(Item_Code) references Item(Item_Code)
);


Answer 2:

Items:	
insert into item values('01','book','25.00',75,15,50,12);
insert into item values('02','calculator','650.00',80,50,12,21);
insert into item values('03','record','60.00',23,72,40,31);
insert into item values('04','pen','5.00',44,32,93,80);
insert into item values('05','bag','1000.00',99,32,78,32);

Vendor:
insert into vendor values('21','John','Las Vegas');
insert into vendor values('22','Siri','Canyon road');
insert into vendor values('23','Tom','Chicao');
insert into vendor values('24','Messi','Miami');
insert into vendor values('25','Joy','Oxford Street');
	
Section:
insert into section values('15','shop1');
insert into section values('16','shop2');
insert into section values('17','shop3');
insert into section values('18','shop4');
insert into section values('19','shop5');

Cheque:
insert into cheque values(1010,'18-DEC-2018',24567.00);	
insert into cheque values(1781,'21-JAN-2019',12137.00);	
insert into cheque values(1562,'13-DEC-2016',34575.00);	
insert into cheque values(1231,'19-MAR-2017',53461.00);
insert into cheque values(1120,'17-NOV-2017',43576.00);	

Voucher
insert into voucher values(34,'18-DEC-2018',21,1781);
insert into voucher values(56,'17-NOV-2017',24,1562);
insert into voucher values(12,'21-JAN-2019',23,1781);
insert into voucher values(98,'13-DEC-2016',22,1231);
insert into voucher values(87,'19-MAR-2017',25,1120);
	
Indent:
insert into indent values(45,13,112,15,1);
insert into indent values(32,78,162,17,5);
insert into indent values(67,23,171,16,4);
insert into indent values(12,56,435,18,3);
insert into indent values(87,12,557,19,2);

Orders:
insert into orders values('32','12-MAR-2019','34','21','18-DEC-2018');
insert into orders values('42','19-SEP-2012','56','21','17-NOV-2017');
insert into orders values('66','20-JUN-2015','12','21','21-JAN-2019');
insert into orders values('78','31-MAY-2016','98','21','13-DEC-2016');
insert into orders values('67','06-APR-2012','87','21','19-MAR-2017');

Ordering:
insert into ordering values('32','01','112');
insert into ordering values('42','02','557');
insert into ordering values('66','03','435');
insert into ordering values('78','04','171');
insert into ordering values('67','05','220');


Answer 3:

update item set unit_price = unit_price*1.01;


Answer 4:

alter table item add Constraint chk_item 
check(unit_price > 0);

//for making sure that Constraint is added use this
insert into item values('06','bag',-2,99,32,78,32);


Answer 5:

alter table Orders 
drop Constraint fk1_order;

alter table Orders 
add Constraint fk3_order 
Foreign Key(Voucher_No) references voucher(Voucher_No) on delete set null;

delete from voucher where Voucher_No=12;

//for checking if it worked fine add this query
select * from Orders;


Answer 6:

select Item_Code,count(*) from ordering
group by Item_Code having count(*)=1
order by Item_Code;


Answer 7:

select count(*) as numberOfTuples from item;

select min(EOQ) as minimumEOQ,max(EOQ) as maximumEOQ from item;

select avg(EOQ) as averageEOQ,sum(EOQ) as sumOfEOQ from item;


Answer 8:

//Add some data in the table first 
**watch for integrity Constraint according to your data**
insert into voucher values(23,'19-MAR-2017',25,1120);
insert into voucher values(24,'19-MAR-2017',25,1120);
insert into orders values('68','20-JAN-2000','23','21','21-JAN-2000');
insert into orders values('69','12-JUN-2002','24','21','21-JAN-2003');

//now execute the query
select * from Orders
where Order_Date between '01-Jan-2000' and '31-Jan-2006';


Answer 9:

//Left Join
select * 
from orders O Left Join voucher V
on V.Voucher_No=O.Voucher_No
order by Order_No;

//Right Join
select * 
from orders O Right Join voucher V
on V.Voucher_No=O.Voucher_No
order by Order_No;

//Full Outer Join
select * 
from orders O Full Outer Join voucher V
on V.Voucher_No=O.Voucher_No
order by Order_No;


Answer 10:

create index idx_unitPrice on item(Unit_Price);
drop index idx_unitPrice;


Answer 11:

//inserting elements for getting outputs
insert into voucher values(25,'19-MAR-2017',25,1120);

//Union
select O.Voucher_No from Orders O
union
select V.Voucher_No from Voucher V;

//Intersection
select V.Voucher_No from Voucher V
intersect
select O.Voucher_No from Orders O;

//Exception
select V.Voucher_No from Voucher V
minus
select O.Voucher_No from Orders O;


Answer 12:

alter table Section add incahrge_code int;


Answer 13:

select i.Item_Code, i.Item_Description, i.Unit_Price 
from Item i, Orders o, Ordering od
where   o.Order_No = od.Order_No and  
        i.Item_Code = od.Item_Code and 
        o.Order_No = 67 and o.Vendor_No = 21;


Answer 14:

select o.Order_No, o.Order_Date, v.Vendor_Addr, i.Item_Code, i.Item_Description, i.EOQ, od.Quantity_Recieved
from vendor v, Orders o, item i, ordering od
where   od.Order_No = o.Order_No and i.Item_Code = od.Item_Code and   
        o.Vendor_No = v.Vendor_No
order by o.Order_Date;


Answer 15:

select ind.Indent_No, s.Section_Code, s.Section_Name, i.Item_Code,
        i.Item_Description, ind.Quantity_Demanded, ind.Quantity_Issued
from indent ind,Section s, Item i
where ind.Item_Code = i.Item_Code and ind.Section_Code = s.Section_Code;


Answer 16:

select o.Order_No, o.Order_Date, o.Due_Date, v.Vendor_No, v.Vendor_Name,
((select sysdate from dual) - o.Order_Date) as Delay
from orders o, Vendor v
where v.Vendor_No = o.Vendor_No;


Answer 17:

Select i.Item_Code, i.Item_Description, i.Unit_Price, i.EOQ, od.Quantity_Recieved,
       concat('Rs ',(i.EOQ * od.Quantity_Recieved)) as itemOrderValue 
from item i, Orders o, ordering od
where od.Item_Code = i.Item_Code and od.Order_No = o.Order_No and 
      o.Order_No = 67 and o.Vendor_No = 21 and o.Voucher_No = 87;


Answer 18:

select v.Voucher_No, v.Voucher_Date, c.Cheque_No, c.Cheque_Amount, c.Cheque_Date
from Cheque c, voucher v, Vendor ve
where v.Vendor_No = ve.Vendor_No and c.Cheque_No = v.Cheque_No and v.Vendor_No=25;


Answer 19:

Select i.Item_Code, i.Item_Description, i.Unit_Price, ind.Quantity_Issued,
        concat('Rs ', ( ind.Quantity_Issued * i.Unit_Price)) as ItemConsumptionValue
from Item i, indent ind
where i.Item_Code = ind.Item_Code;


Answer 20:

Case 1:
    create or replace TRIGGER t
    before insert on item for  each row
    declare
    begin
    if(:new.SOH > :new.ROL) then
    raise_application_error(-20010,'SOH value should be less than ROL');
    end if;
    end;
    /